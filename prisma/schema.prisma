generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Role {
  id          Int      @id @default(autoincrement())
  name        String
  description String?
  created_at  DateTime @default(now())
  updated_at  DateTime @updatedAt
  users       User[]

  @@map("roles")
}

model User {
  id         Int      @id @default(autoincrement())
  email      String   @unique
  first_name String
  last_name  String?
  password   String
  status     Status   @default(ACTIVE)
  role_id    Int
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
  answers    Answer[]
  forms      Form[]
  role       Role     @relation(fields: [role_id], references: [id])

  @@map("users")
}

model Form {
  id          String        @id @default(uuid())
  title       String
  description String?
  is_public   Boolean    @default(true)
  invites     String[]
  user_id     Int
  created_at  DateTime   @default(now())
  updated_at  DateTime   @updatedAt
  answers     Answer[]
  user        User       @relation(fields: [user_id], references: [id])
  questions   Question[]

  @@map("forms")
}

model Question {
  id         Int      @id @default(autoincrement())
  type       String
  question   String
  options    Json?    @default("[]")
  required   Boolean
  form_id    String
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
  answers    Answer[]
  form       Form     @relation(fields: [form_id], references: [id])

  @@map("questions")
}

model Answer {
  id          Int      @id @default(autoincrement())
  user_id     Int
  form_id     String
  question_id Int
  created_at  DateTime @default(now())
  updated_at  DateTime @updatedAt
  value       String
  form        Form     @relation(fields: [form_id], references: [id])
  question    Question @relation(fields: [question_id], references: [id])
  user        User     @relation(fields: [user_id], references: [id])

  @@map("answers")
}

/// @model - struktur model
/// *
enum Status {
  ACTIVE
  INACTIVE
}
